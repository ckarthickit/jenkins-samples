/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

//project.ext.artifactsToPublish=[]

//apply from : "$rootDir/artifacts/$artifactFolderName/artifact.gradle"
//def artifactPropertyFile = file("$rootDir/artifacts/$artifactFolderName/artifact.properties")
// Properties props = new Properties()
// props.load(new FileReader(artifactPropertyFile))

// project.ext.artifactGroup = props.getProperty('artifactGroup')
// project.ext.artifactName = props.getProperty('artifactName')
// project.ext.artifactVersion = props.getProperty('artifactVersion')

task publishArtifactsToMavenLocal {
    // doLast {
    //     println "artifacts = $artifactsToPublish"
    //     println "Publishing"
    //     println "${publishing.publications}"
    //     publishing.publications.each {
    //         pb -> 
    //             println "======"
    //             println pb.name
    //             println pb.artifacts  
    //             println "======"
    //     }
    // }

    group 'publishing'
    description 'Publish libraries to maven local'
    // librariesToPublish.each {
    //     dependsOn tasks.getByPath(it + ':publishToMavenLocal')
    // }
}

// task attachArtifacts {
//     doLast {
//         publishing.publications.each {
//                 pb -> 
//                     println "======"
//                     def artifacts = []
//                     // artifactsToPublish.each {
//                     //     artifactFile ->
//                     //         artifacts += [new MavenArtifact(artifactFile)]
//                     // }
//                     println "**artifacts= " + artifacts
//                     pb.setArtifacts(artifacts)
//                     println pb.name
//                     println pb.artifacts  
//                     println "======"
//         }
//     }
// }
// publishArtifactsToMavenLocal.dependsOn publishToMavenLocal
// publishToMavenLocal.dependsOn attachArtifacts
// attachArtifacts.dependsOn composeArtifacts

// allprojects {
//     isSnapshot = project.hasProperty('isSnapshot') && !isSnapshot.toBoolean()
// }
task clean(type: Delete) {
    delete rootProject.buildDir
}